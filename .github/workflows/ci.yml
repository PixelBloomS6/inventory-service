name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: inventory-service
  AZURE_RESOURCE_GROUP: pixelbloom-rg
  AZURE_AKS_CLUSTER: pixelbloom-aks
  AZURE_ACR_NAME: pixelbloomacr1750202956

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov python-multipart
      - name: Run unit tests with coverage
        run: |
          export DATABASE_URL="sqlite:///:memory:"
          python -m pytest --cov=app --cov-report=xml
        env:
          DATABASE_URL: "sqlite:///:memory:"
          TESTING: "true"
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: inventory_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Run integration tests
        run: pytest tests/test_inventory_integration.py -v
        env:
          TESTING: "true"
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: inventory_db
  
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev rabbitmq-server

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest testcontainers pika

      # - name: Run E2E Tests
      #   run: pytest tests/test_inventory_e2e.py -v
      #   env:
      #     TESTING: "true"

  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  zap_scan:
    runs-on: ubuntu-latest
    name: ZAP Security Sscan
    needs: sonarqube
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build FastAPI App Docker Image
        run: |
          docker build -t pixelbloom-app .

      - name: Create Docker network
        run: |
          docker network create zap-net || echo "Network already exists"

      - name: Run FastAPI App container
        run: |
          docker run -d --rm \
            --name pixelbloom-app \
            --network zap-net \
            -p 8001:8001 \
            pixelbloom-app

      - name: Wait for App to Become Healthy
        run: |
          echo "Waiting for app to become healthy..."
          for i in {1..20}; do
            if curl -s http://localhost:8001/health; then
              echo "App is up!"
              break
            fi
            sleep 5
          done

      - name: Create writable folder for ZAP output
        run: mkdir -p zap-output
      
      - name: Create writable folder for ZAP output
        run: |
          mkdir -p zap-output
          chmod 777 zap-output


      - name: Run OWASP ZAP Scan
        run: |
          docker run --rm \
            --network zap-net \
            -v ${{ github.workspace }}/zap-output:/zap/wrk:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://pixelbloom-app:8001 \
            -g gen.conf \
            -r zap_report.html

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-output/zap_report.html

  
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, sonarqube, zap_scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ env.AZURE_ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
            ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-azure:
    name: Deploy to Azure AKS
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_AKS_CLUSTER }}

      - name: Update Kubernetes manifests
        run: |
          sed -i 's|image: .*|image: ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}|' k8s/azure-k8s-manifests.yaml

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/azure-k8s-manifests.yaml

      # - name: Wait for deployment rollout
      #   run: |
      #     kubectl rollout status deployment/inventory-service -n pixelbloom-prod --timeout=300s

      # - name: Verify deployment
      #   run: |
      #     kubectl get pods -n pixelbloom-prod
      #     kubectl get svc -n pixelbloom-prod
      #     kubectl get hpa -n pixelbloom-prod
