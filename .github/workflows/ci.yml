name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: inventory-service
  AZURE_RESOURCE_GROUP: pixelbloom-rg
  AZURE_AKS_CLUSTER: pixelbloom-aks
  AZURE_ACR_NAME: pixelbloomacr1750202956

# jobs:
#   unit-tests:
#     name: Unit Tests
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'
#       - name: Install dependencies
#         run: |
#           pip install -r requirements.txt
#           pip install pytest pytest-cov python-multipart
#       - name: Run unit tests with coverage
#         run: |
#           export DATABASE_URL="sqlite:///:memory:"
#           python -m pytest --cov=app --cov-report=xml
#         env:
#           DATABASE_URL: "sqlite:///:memory:"
#           TESTING: "true"
#       - name: Upload coverage report
#         uses: actions/upload-artifact@v4
#         with:
#           name: coverage-report
#           path: coverage.xml

#   integration-tests:
#     name: Integration Tests
#     runs-on: ubuntu-latest
#     needs: unit-tests
#     steps:
#       - name: Integration Test Step
#         run: echo "Integration tests to be implemented."

#   sonarqube:
#     name: SonarQube Scan
#     runs-on: ubuntu-latest
#     needs: unit-tests
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#       - name: Download coverage report
#         uses: actions/download-artifact@v4
#         with:
#           name: coverage-report
#       - name: SonarQube Scan
#         uses: sonarsource/sonarqube-scan-action@master
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # needs: [unit-tests, integration-tests, sonarqube]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ env.AZURE_ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
            ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-azure:
    name: Deploy to Azure AKS
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_AKS_CLUSTER }}

      - name: Update Kubernetes manifests
        run: |
          sed -i 's|image: .*|image: ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}|' k8s/azure-k8s-manifests.yaml

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/azure-k8s-manifests.yaml

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/inventory-service -n pixelbloom-prod --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods -n pixelbloom-prod
          kubectl get svc -n pixelbloom-prod
          kubectl get hpa -n pixelbloom-prod

  load-test:
    name: Load Test
    runs-on: ubuntu-latest
    needs: deploy-to-azure
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_AKS_CLUSTER }}

      - name: Run load test
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: k6-load-test-$(date +%s)
            namespace: pixelbloom-prod
          spec:
            template:
              spec:
                containers:
                - name: k6
                  image: grafana/k6:latest
                  command: ["k6", "run", "-"]
                  stdin: true
                  env:
                  - name: TARGET_URL
                    value: "http://inventory-service.pixelbloom-prod.svc.cluster.local/inventory/items/"
                restartPolicy: Never
            backoffLimit: 0
          EOF

          sleep 30
          kubectl wait --for=condition=complete job -l app=k6-load-test -n pixelbloom-prod --timeout=300s

      - name: Check autoscaling results
        run: |
          echo "Checking HPA status:"
          kubectl get hpa -n pixelbloom-prod
          echo "Checking pod count:"
          kubectl get pods -n pixelbloom-prod | grep inventory-service
